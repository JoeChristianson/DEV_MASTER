name: Update SOP Library

on:
  workflow_dispatch:
    inputs:
      sop_number:
        description: 'e.g., DEV-SOP-001'
        required: true
      title:
        description: 'Short title'
        required: true
      category:
        description: 'Debugging | Git Workflow | Testing | Automation | Deployment | Other'
        required: true
      trigger:
        description: 'When this SOP applies'
        required: true
      steps_md:
        description: "Steps (one per line). They'll be numbered."
        required: true
      notes_md:
        description: "Notes & Optimizations (optional; one bullet per line)"
        required: false
        default: ""
      est_time_minutes:
        description: 'Estimated time savings per occurrence (minutes, integer)'
        required: true
      frequency:
        description: 'Format: <count>/<period> where period is day|week|month. Example: 10/week'
        required: true
      automation_opportunity:
        description: 'Yes/No + brief idea'
        required: true
      status:
        description: 'Draft | Finalized'
        required: true
        default: 'Draft'

jobs:
  update-sop:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Apply SOP update
        id: apply
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            // ---- Inputs & defaults ----
            const i = context.payload.inputs;
            const DEFAULT_FILE = 'docs/developer-sop-library.md';

            const sopNum = (i.sop_number || '').trim();
            const title = (i.title || '').trim();
            const category = (i.category || '').trim();
            const triggerTxt = (i.trigger || '').trim();
            const stepsRaw = (i.steps_md || '').trim();
            const notesRaw = (i.notes_md || '').trim();
            const estMinutes = parseInt(i.est_time_minutes, 10);
            const automation = (i.automation_opportunity || '').trim();
            const status = (i.status || '').trim();
            const filePath = DEFAULT_FILE;

            // frequency: "<count>/<period>"
            const freqMatch = (i.frequency || '').trim().match(/^(\d+)\s*\/\s*(day|week|month)$/i);
            if (!freqMatch) {
              core.setFailed('frequency must be "10/week", "2/day", or "5/month"');
              return;
            }
            const freqCount = parseInt(freqMatch[1], 10);
            const freqPeriod = freqMatch[2].toLowerCase();

            // ---- Validation ----
            if (!/^DEV-SOP-\d{3,}$/.test(sopNum)) {
              core.setFailed('Invalid sop_number (expected DEV-SOP-###)');
              return;
            }
            if (Number.isNaN(estMinutes) || Number.isNaN(freqCount)) {
              core.setFailed('est_time_minutes and frequency count must be integers');
              return;
            }
            if (['day','week','month'].indexOf(freqPeriod) === -1) {
              core.setFailed('frequency period must be one of: day | week | month');
              return;
            }

            // ---- Calculations ----
            const periodFactor = freqPeriod === 'day' ? 30 : (freqPeriod === 'week' ? 4 : 1);
            const totalMonthly = estMinutes * freqCount * periodFactor; // minutes
            const totalMonthlyStr = (totalMonthly > 0)
              ? (Math.floor(totalMonthly/60) + 'h ' + (totalMonthly%60) + 'm')
              : '0h 0m';

            // ---- Ensure file ----
            if (!fs.existsSync(filePath)) {
              fs.mkdirSync(path.dirname(filePath), { recursive: true });
              const starter =
                '# Developer SOP Library\n\n' +
                '## Index Table\n' +
                '| SOP #        | Title                                     | Category  | Frequency | Est. Time Savings | Total Monthly Time Saved |\n' +
                '|--------------|-------------------------------------------|-----------|-----------|-------------------|--------------------------|\n' +
                '\n***\n\n';
              fs.writeFileSync(filePath, starter, 'utf8');
            }

            let md = fs.readFileSync(filePath, 'utf8');

            // ---- Helpers ----
            const escPipes = (s) => s.replace(/\|/g, '\\|');
            const freqDisplay = '~' + freqCount + ' per ' + freqPeriod;
            const estDisplay = '~' + estMinutes + ' min';
            const row = '| ' + sopNum + '  | ' + escPipes(title) + '  | ' + escPipes(category) + '  | ' + escPipes(freqDisplay) + ' | ' + escPipes(estDisplay) + ' | ' + escPipes(totalMonthlyStr) + ' |';

            // Ensure Index Table exists
            if (!/## Index Table/.test(md)) {
              const headerBlock =
                '## Index Table\n' +
                '| SOP #        | Title                                     | Category  | Frequency | Est. Time Savings | Total Monthly Time Saved |\n' +
                '|--------------|-------------------------------------------|-----------|-----------|-------------------|--------------------------|\n';
              md = md.replace(/^# Developer SOP Library\s*\n?/, function(m){ return m + '\n' + headerBlock + '\n***\n'; });
            }

            // Insert/replace row in Index Table
            const tableFullRe = /## Index Table[\s\S]*?(\n\*{3}\n|$)/;
            const reEscape = function(s){ return s.replace(/[-/\\^$*+?.()|[\]{}]/g, '\\$&'); };
            const rowRe = new RegExp('^\\|\\s*' + reEscape(sopNum) + '\\s*\\|.*$', 'm');

            if (rowRe.test(md)) {
              md = md.replace(rowRe, row);
            } else {
              md = md.replace(tableFullRe, function(block){
                return block.replace(/\n\*{3}\n|$/, function(sep){ return '\n' + row + '\n' + sep; });
              });
            }

            // ---- Build section ----
            const steps = stepsRaw.split(/\r?\n/).filter(Boolean).map(function(s, i){
              return (i+1) + '. ' + s.trim();
            }).join('\n');

            const notes = (notesRaw.length
              ? notesRaw.split(/\r?\n/).filter(Boolean).map(function(s){ return '- ' + s.trim(); }).join('\n')
              : '-');

            const sopSectionArr = [];
            sopSectionArr.push('## ' + sopNum + ': ' + title);
            sopSectionArr.push('**Category:** ' + category + '  ');
            sopSectionArr.push('**Trigger:** ' + triggerTxt + '  ');
            sopSectionArr.push('');
            sopSectionArr.push('**Steps:**  ');
            sopSectionArr.push(steps);
            sopSectionArr.push('');
            sopSectionArr.push('**Notes & Optimizations:**  ');
            sopSectionArr.push(notes);
            sopSectionArr.push('');
            sopSectionArr.push('**Estimated Time Savings:** ~' + estMinutes + ' minutes per occurrence  ');
            sopSectionArr.push('**Frequency:** ' + freqDisplay + '  ');
            sopSectionArr.push('**Automation Opportunity:** ' + automation + '  ');
            sopSectionArr.push('**Status:** ' + status);
            const sopSection = '\n' + sopSectionArr.join('\n') + '\n';

            const sectionRe = new RegExp('##\\s+' + reEscape(sopNum) + ':[\\s\\S]*?(?=\\n##\\s+DEV-SOP-|$)', 'm');
            if (sectionRe.test(md)) {
              md = md.replace(sectionRe, sopSection.trim());
            } else {
              if (!/\n\*{3}\n/.test(md)) md += '\n\n***\n';
              md = md.replace(/\s*$/, '\n' + sopSection + '\n');
            }

            fs.writeFileSync(filePath, md, 'utf8');
            core.setOutput('file', filePath);
            core.setOutput('monthly_minutes', String(totalMonthly));
            core.setOutput('monthly_hm', totalMonthlyStr);