name: Update SOP Library (via JSON â†’ PR)

on:
  workflow_dispatch:
    inputs:
      payload:
        description: 'JSON payload with SOP data'
        required: true

jobs:
  update-sop:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout main
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0

      - name: Apply SOP update
        id: apply
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            // ---- Parse JSON payload ----
            let data;
            try {
              data = JSON.parse(context.payload.inputs.payload);
            } catch (e) {
              core.setFailed('Payload is not valid JSON: ' + e.message);
              return;
            }

            // ---- Defaults ----
            const DEFAULT_FILE = 'docs/developer-sop-library.md';

            // ---- Destructure with fallbacks ----
            const sopNum = (data.sop_number || '').trim();
            const title = (data.title || '').trim();
            const category = (data.category || '').trim();
            const triggerTxt = (data.trigger || '').trim();
            const stepsArr = Array.isArray(data.steps) ? data.steps : [];
            const notesArr = Array.isArray(data.notes) ? data.notes : [];
            const estMinutes = parseInt(data.est_time_minutes, 10);
            const automation = (data.automation_opportunity || '').trim();
            const status = (data.status || 'Draft').trim();

            // frequency: allow {count, period} or "count/period"
            let freqCount, freqPeriod;
            if (typeof data.frequency === 'string') {
              const m = data.frequency.trim().match(/^(\d+)\s*\/\s*(day|week|month)$/i);
              if (!m) return core.setFailed('frequency string must be like "10/week", "2/day", or "5/month"');
              freqCount = parseInt(m[1], 10);
              freqPeriod = m[2].toLowerCase();
            } else if (data.frequency && typeof data.frequency === 'object') {
              freqCount = parseInt(data.frequency.count, 10);
              freqPeriod = String(data.frequency.period || '').toLowerCase();
            } else {
              return core.setFailed('frequency must be provided (string "10/week" or object {count, period})');
            }

            const filePath = (data.file_path || DEFAULT_FILE).trim();

            // ---- Validation ----
            if (!/^DEV-SOP-\d{3,}$/.test(sopNum)) return core.setFailed('Invalid sop_number (expected DEV-SOP-###)');
            if (!title) return core.setFailed('title is required');
            if (!category) return core.setFailed('category is required');
            if (!triggerTxt) return core.setFailed('trigger is required');
            if (!stepsArr.length) return core.setFailed('steps must be a non-empty array of strings');
            if (Number.isNaN(estMinutes)) return core.setFailed('est_time_minutes must be an integer');
            if (Number.isNaN(freqCount)) return core.setFailed('frequency.count must be an integer');
            if (['day','week','month'].indexOf(freqPeriod) === -1) return core.setFailed('frequency.period must be one of: day | week | month');

            // ---- Calculations ----
            const periodFactor = freqPeriod === 'day' ? 30 : (freqPeriod === 'week' ? 4 : 1);
            const totalMonthly = estMinutes * freqCount * periodFactor; // minutes
            const totalMonthlyStr = (totalMonthly > 0)
              ? (Math.floor(totalMonthly/60) + 'h ' + (totalMonthly%60) + 'm')
              : '0h 0m';

            // ---- Ensure file exists ----
            if (!fs.existsSync(filePath)) {
              fs.mkdirSync(path.dirname(filePath), { recursive: true });
              const starter =
                '# Developer SOP Library\n\n' +
                '## Index Table\n' +
                '| SOP #        | Title                                     | Category  | Frequency | Est. Time Savings | Total Monthly Time Saved |\n' +
                '|--------------|-------------------------------------------|-----------|-----------|-------------------|--------------------------|\n' +
                '\n***\n\n';
              fs.writeFileSync(filePath, starter, 'utf8');
            }

            let md = fs.readFileSync(filePath, 'utf8');

            // ---- Helpers ----
            const escPipes = (s) => s.replace(/\|/g, '\\|');
            const reEscape = (s) => s.replace(/[-/\\^$*+?.()|[\]{}]/g, '\\$&');
            const freqDisplay = '~' + freqCount + ' per ' + freqPeriod;
            const estDisplay = '~' + estMinutes + ' min';
            const row = '| ' + sopNum + '  | ' + escPipes(title) + '  | ' + escPipes(category) + '  | ' + escPipes(freqDisplay) + ' | ' + escPipes(estDisplay) + ' | ' + escPipes(totalMonthlyStr) + ' |';

            // Ensure Index Table exists
            if (!/## Index Table/.test(md)) {
              const headerBlock =
                '## Index Table\n' +
                '| SOP #        | Title                                     | Category  | Frequency | Est. Time Savings | Total Monthly Time Saved |\n' +
                '|--------------|-------------------------------------------|-----------|-----------|-------------------|--------------------------|\n';
              md = md.replace(/^# Developer SOP Library\s*\n?/, function(m){ return m + '\n' + headerBlock + '\n***\n'; });
            }

            // Insert/replace row in Index Table
            const tableFullRe = /## Index Table[\s\S]*?(\n\*{3}\n|$)/;
            const rowRe = new RegExp('^\\|\\s*' + reEscape(sopNum) + '\\s*\\|.*$', 'm');
            if (rowRe.test(md)) {
              md = md.replace(rowRe, row);
            } else {
              md = md.replace(tableFullRe, function(block){
                return block.replace(/\n\*{3}\n|$/, function(sep){ return '\n' + row + '\n' + sep; });
              });
            }

            // ---- Build section ----
            const steps = stepsArr.map(function(s, i){ return (i+1) + '. ' + String(s).trim(); }).join('\n');
            const notes = notesArr.length
              ? notesArr.map(function(s){ return '- ' + String(s).trim(); }).join('\n')
              : '-';

            const sopSection =
              '\n' +
              '## ' + sopNum + ': ' + title + '\n' +
              '**Category:** ' + category + '  ' + '\n' +
              '**Trigger:** ' + triggerTxt + '  ' + '\n' +
              '\n' +
              '**Steps:**  ' + '\n' +
              steps + '\n' +
              '\n' +
              '**Notes & Optimizations:**  ' + '\n' +
              notes + '\n' +
              '\n' +
              '**Estimated Time Savings:** ~' + estMinutes + ' minutes per occurrence  ' + '\n' +
              '**Frequency:** ' + freqDisplay + '  ' + '\n' +
              '**Automation Opportunity:** ' + automation + '  ' + '\n' +
              '**Status:** ' + status + '\n';

            const sectionRe = new RegExp('##\\s+' + reEscape(sopNum) + ':[\\s\\S]*?(?=\\n##\\s+DEV-SOP-|$)', 'm');
            if (sectionRe.test(md)) {
              md = md.replace(sectionRe, sopSection.trim());
            } else {
              if (!/\n\*{3}\n/.test(md)) md += '\n\n***\n';
              md = md.replace(/\s*$/, '\n' + sopSection + '\n');
            }

            fs.writeFileSync(filePath, md, 'utf8');

      - name: Create feature branch and commit
        run: |
          BRANCH="sop/${{ github.run_id }}"
          git checkout -b "$BRANCH"
          git add "docs/developer-sop-library.md"
          git commit -m "chore(sop): update via JSON payload" || echo "No changes to commit"
          git push -u origin "$BRANCH"

      - name: Open PR
        uses: peter-evans/create-pull-request@v6
        with:
          base: main
          branch: sop/${{ github.run_id }}
          title: "chore(sop): update via JSON payload"
          body: "Automated SOP update from workflow run ${{ github.run_id }}."
          commit-message: "chore(sop): update via JSON payload"
