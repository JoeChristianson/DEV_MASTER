name: Update SOP Library

on:
  workflow_dispatch:
    inputs:
      sop_number:
        description: 'e.g., DEV-SOP-001'
        required: true
      title:
        description: 'Short title'
        required: true
      category:
        description: 'Debugging | Git Workflow | Testing | Automation | Deployment | Other'
        required: true
      trigger:
        description: 'When this SOP applies'
        required: true
      steps_md:
        description: "Steps (one per line). They'll be numbered."
        required: true
      notes_md:
        description: "Notes & Optimizations (optional; one bullet per line)"
        required: false
        default: ""
      est_time_minutes:
        description: 'Estimated time savings per occurrence (minutes, integer)'
        required: true
      frequency:
        description: 'Format: <count>/<period> where period is day|week|month. Example: 10/week'
        required: true
      automation_opportunity:
        description: 'Yes/No + brief idea'
        required: true
      status:
        description: 'Draft | Finalized'
        required: true
        default: 'Draft'

jobs:
  update-sop:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Apply SOP update
        id: apply
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            // ---- Inputs & defaults ----
            const i = context.payload.inputs;
            const DEFAULT_FILE = 'docs/developer-sop-library.md';
            const DEFAULT_BRANCH = 'main';

            const sopNum = i.sop_number.trim();
            const title = i.title.trim();
            const category = i.category.trim();
            const triggerTxt = i.trigger.trim();
            const stepsRaw = i.steps_md.trim();
            const notesRaw = (i.notes_md || "").trim();
            const estMinutes = parseInt(i.est_time_minutes, 10);
            const automation = i.automation_opportunity.trim();
            const status = i.status.trim();
            const filePath = DEFAULT_FILE;

            // frequency: "<count>/<period>"
            const freqMatch = (i.frequency || '').trim().match(/^(\d+)\s*\/\s*(day|week|month)$/i);
            if (!freqMatch) {
              core.setFailed('frequency must be formatted like "10/week", "2/day", or "5/month"');
              return;
            }
            const freqCount = parseInt(freqMatch[1], 10);
            const freqPeriod = freqMatch[2].toLowerCase();

            // ---- Validation ----
            if (!/DEV-SOP-\d{3,}/.test(sopNum)) {
              core.setFailed(`Invalid sop_number: ${sopNum} (expected DEV-SOP-###)`);
              return;
            }
            if (Number.isNaN(estMinutes) || Number.isNaN(freqCount)) {
              core.setFailed('est_time_minutes and frequency count must be integers');
              return;
            }
            if (!['day','week','month'].includes(freqPeriod)) {
              core.setFailed(`frequency period must be one of: day | week | month`);
              return;
            }

            // ---- Calculations ----
            const periodFactor = freqPeriod === 'day' ? 30 : (freqPeriod === 'wee
